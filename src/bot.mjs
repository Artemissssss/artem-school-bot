import TeleBot from "telebot"
// const openai = require('openai');
// const { MongoClient } = require('mongodb');
import { MongoClient } from 'mongodb';
import { nanoid } from 'nanoid'

const bot = new TeleBot( {token: process.env.TELEGRAM_BOT_TOKEN,usePlugins: ['askUser']})
bot.on('/del', async msg => {
    // const markup = updateKeyboard('apples');

    // return bot.sendMessage(
    //     msg.from.id, 'This is a editMessageReplyMarkup example. So, apples or oranges?', {markup}
    // ).then(re => {
    //     // Start updating message
    //     lastMessage = [msg.from.id, re.result.message_id];
    // });
    let replyMarkup = bot.keyboard([
        ['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å'],
        ['–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å']
    ], {resize: true});

    return bot.sendMessage(msg.from.id, `ü§ñ –ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º. –û—Å—å –¥–µ—è–∫—ñ –∑ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ —è –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏:
    
    üè´ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
    üìö –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
    üìå –í–∞–∂–ª–∏–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    üìã –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —Ç–∞ —ó—Ö –∑–¥–∞—á–∞
    üìÅ –ü–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≥—Ä—É–ø—ñ
    üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
    üóìÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π
    üìä –û—Ü—ñ–Ω–∫–∏ —Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤
    üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Å—É–º–∫–∏ —É—Ä–æ–∫—ñ–≤
    
    ...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏. –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —É –≤—Å—å–æ–º—É, –ø–æ–≤'—è–∑–∞–Ω–æ–º—É –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º. –ü–æ—á–Ω—ñ–º–æ —Ä–∞–∑–æ–º! üéì`, {replyMarkup});

})
bot.on("text", async msg =>{
    console.log(msg)
    fetch("https://artem-school-bot.vercel.app/keyboard", {body:msg})
    return null;
})
bot.on('/start', async msg => {
    let replyMarkup = bot.keyboard([
        ['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å'],
        ['–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å', '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å']
    ], {resize: true});

    return bot.sendMessage(msg.from.id, `ü§ñ –ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º. –û—Å—å –¥–µ—è–∫—ñ –∑ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ —è –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏:
    
    üè´ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
    üìö –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
    üìå –í–∞–∂–ª–∏–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    üìã –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —Ç–∞ —ó—Ö –∑–¥–∞—á–∞
    üìÅ –ü–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≥—Ä—É–ø—ñ
    üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
    üóìÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π
    üìä –û—Ü—ñ–Ω–∫–∏ —Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤
    üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Å—É–º–∫–∏ —É—Ä–æ–∫—ñ–≤
    
    ...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏. –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —É –≤—Å—å–æ–º—É, –ø–æ–≤'—è–∑–∞–Ω–æ–º—É –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º. –ü–æ—á–Ω—ñ–º–æ —Ä–∞–∑–æ–º! üéì`, {replyMarkup});

});

bot.on('ask.class', async msg => {
    // console.log(msg.reply_to_message.reply_markup)
    console.log(msg)
    let replyMarkup = bot.keyboard([
        [],
    ], {resize: true});
if(msg.text === "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å"){
    let idClass = [nanoid(),nanoid()]
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    const coll = client.db('artem-school').collection('classrooms');
    const result = await coll.insertOne({idT:idClass[1],idS:idClass[0],files:[],events:[],homework:[],marks:[],lessons:[],statisticks:[]})
    const coll2 = client.db('artem-school').collection('users');
    const result2 = await coll2.insertOne({name:msg.from.name, username:msg.from.username, id:msg.from.id, role:1, classId: idClass[1]})
    await client.close();
    return bot.sendMessage(msg.from.id, `–ö–ª–∞—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–≤—Å—è!
    <code>${idClass[0]}</code> - id –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è —É—á–Ω—è –≤ –∫–ª–∞—Å
    <code>${idClass[1]}</code> - id –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è –≤ –∫–ª–∞—Å
    `, {ask: 'actiont', parseMode: 'html',replyMarkup});
}else if(msg.text === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å"){
    return  bot.sendMessage(msg.from.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å id —É—á–Ω—è`, {ask: 'joins',replyMarkup});
}else if(msg.text === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å"){
    return  bot.sendMessage(msg.from.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å id –≤—á–∏—Ç–µ–ª—è `, {ask: 'joint',replyMarkup});
}else{
    let replyMarkup = bot.keyboard([
        ['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å'],
        ['–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å', '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å']
    ], {resize: true,replyMarkup});
    return bot.sendMessage(msg.from.id, `Error`, {ask: 'class',replyMarkup});
}
});

bot.on('ask.joins', async msg => {
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    const coll = client.db('artem-school').collection('classrooms');
            const filter = {idS: msg.text};
            const cursor = coll.find(filter);
            const result = await cursor.toArray();
            console.log(result)
            if(result[0]){
                const users = {"users": [{name:msg.from.name, username:msg.from.username, id:msg.from.id, role:"–í—á–∏—Ç–µ–ª—å"},...result[0].users]}
                coll.updateOne(
                    {idS: msg.text},
                    {
                      $set: { ...users},
                      $currentDate: { lastModified: true }
                    }
                 );
                 await client.close();
                 return await bot.sendMessage(msg.from.id, `–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–ª–∞—Å—É`, {ask: 'actiont'});
            }else{
                await client.close();
                return await bot.sendMessage(msg.from.id, `–í–∏ –≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π id –∫–ª–∞—Å—É`, {ask: 'class'});
            }  
})

bot.on('ask.joint', async msg => {
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    const coll = client.db('artem-school').collection('classrooms');
            const filter = {idS: msg.text};
            const cursor = coll.find(filter);
            const result = await cursor.toArray();
            if(result[0]){
                const users = {"users": [{name:msg.from.name, username:msg.from.username, id:msg.from.id, role:"–£—á–µ–Ω—å"},...result[0].users]}
                coll.updateOne(
                    {idT: msg.text},
                    {
                      $set: { ...users},
                      $currentDate: { lastModified: true }
                    }
                 );
                 await client.close();
                 return await bot.sendMessage(msg.from.id, `–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–ª–∞—Å—É`, {ask: 'actions'});
            }else{
                await client.close();
                return await bot.sendMessage(msg.from.id, `–í–∏ –≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π id –∫–ª–∞—Å—É`, {ask: 'class'});
            }   
})


// bot.on("text", async msg => {
//     let replyMarkup = bot.keyboard([
//         ['/buttons', '/inlineKeyboard'],
//         ['/start', '/hide']
//     ], {resize: true});

//     return bot.sendMessage(msg.from.id, 'Keyboard example.', {replyMarkup});
// });

// bot.on('/inlineKeyboard', msg => {

//     let replyMarkup = bot.inlineKeyboard([
//         [
//             bot.inlineButton('callback', {callback: 'this_is_data'}),
//             bot.inlineButton('inline', {inline: 'some query'})
//         ], [
//             bot.inlineButton('url', {url: 'https://telegram.org'})
//         ]
//     ]);

//     return bot.sendMessage(msg.from.id, 'Inline keyboard example.', {replyMarkup});

// });

// // Inline button callback
// bot.on('callbackQuery', msg => {
//     // User message alert
//     console.log(msg)
//     bot.sendMessage(msg.from.id,msg.data)
//     return bot.answerCallbackQuery(msg.id, `Inline button callback: ${ msg.data }`, true);
// });

// // Inline query
// bot.on('inlineQuery', msg => {

//     const query = msg.query;
//     const answers = bot.answerList(msg.id);

//     answers.addArticle({
//         id: 'query',
//         title: 'Inline Query',
//         description: `Your query: ${ query }`,
//         message_text: 'Click!'
//     });

//     return bot.answerQuery(answers);

// });

export default bot

//YsbcVL8dXcW0lAY7