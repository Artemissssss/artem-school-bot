import TeleBot from "telebot"
import pkg from 'telebot';
const { Markup } = pkg;
import { MongoClient,ObjectId } from 'mongodb';
import { nanoid } from 'nanoid'
import moment from 'moment-timezone';


const bot = new TeleBot( {token: process.env.TELEGRAM_BOT_TOKEN})
let lastUserMessage = {};
let userStatus = {};
let userClass = {};
let userChat = {};
let userAction = {};

function getWeeks() {
    const weeks = [];
    const now = moment().tz("Europe/Kiev");

    for(let i = -3; i <= 1; i++) {
        const week = [];
        const monday = now.clone().add(i, 'weeks').startOf('isoWeek');

        for(let j = 0; j < 5; j++) {
            week.push(monday.clone().add(j, 'days').format('DD.MM.YYYY'));
        }

        weeks.push(week.reverse());
    }

    return weeks.reverse();
}

function isValidFormat(text) {
    var parts = text.split('-');
    if (parts.length !== 2) {
        return false;
    }

    var start = parts[0].split(':');
    var end = parts[1].split(':');

    if (start.length !== 2 || end.length !== 2) {
        return false;
    }

    var startHour = parseInt(start[0], 10);
    var startMinute = parseInt(start[1], 10);
    var endHour = parseInt(end[0], 10);
    var endMinute = parseInt(end[1], 10);

    if (isNaN(startHour) || isNaN(startMinute) || isNaN(endHour) || isNaN(endMinute)) {
        return false;
    }

    if (startHour < 0 || startHour > 23 || endHour < 0 || endHour > 23) {
        return false;
    }

    if (startMinute < 0 || startMinute > 59 || endMinute < 0 || endMinute > 59) {
        return false;
    }

    if (startHour > endHour || (startHour === endHour && startMinute > endMinute)) {
        return false;
    }

    return true;
}

function sortTimes(times) {
    return times.sort(function(a, b) {
        var startA = a.split('-')[0];
        var endA = a.split('-')[1];
        var startB = b.split('-')[0];
        var endB = b.split('-')[1];

        var startHourA = parseInt(startA.split(':')[0], 10);
        var startMinuteA = parseInt(startA.split(':')[1], 10);
        var endHourA = parseInt(endA.split(':')[0], 10);
        var endMinuteA = parseInt(endA.split(':')[1], 10);

        var startHourB = parseInt(startB.split(':')[0], 10);
        var startMinuteB = parseInt(startB.split(':')[1], 10);
        var endHourB = parseInt(endB.split(':')[0], 10);
        var endMinuteB = parseInt(endB.split(':')[1], 10);

        if (startHourA !== startHourB) {
            return startHourA - startHourB;
        } else if (startMinuteA !== startMinuteB) {
            return startMinuteA - startMinuteB;
        } else if (endHourA !== endHourB) {
            return endHourA - endHourB;
        } else {
            return endMinuteA - endMinuteB;
        }
    });
}

bot.on('/del', async msg => {
    await fetch("https://artem-school-api.onrender.com/api/zustrich", {
        method: 'POST', // –ú–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É (GET, POST, PUT, DELETE —Ç–æ—â–æ)
        headers: {
          'Content-Type': 'application/json', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Ç—É
          // –Ü–Ω—à—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        },
        body:JSON.stringify({type:1, time:"18:00-18:21"})    
        // –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–∞–Ω—ñ
        // body: JSON.stringify({ key: 'value' }),
      });
    // const markup = updateKeyboard('apples');

    // return bot.sendMessage(
    //     msg.from.id, 'This is a editMessageReplyMarkup example. So, apples or oranges?', {markup}
    // ).then(re => {
    //     // Start updating message
    //     lastMessage = [msg.from.id, re.result.message_id];
    // });
    console.log(getWeeks());
    let replyMarkup = bot.keyboard([
        ["–ñ—É—Ä–Ω–∞–ª","–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","–£—á–∞—Å–Ω–∏–∫–∏"],
        ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
        ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏","C—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É","–î/–∑", "–ó–∞–¥–∞—Ç–∏ –¥/–∑"],
        ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–ü–æ–¥—ñ—ó","–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó"],
        ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è","–ö–ª–∞—Å–∏"]
    ], {resize: true});

    return bot.sendMessage(msg.from.id, `ü§ñ –ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º. –û—Å—å –¥–µ—è–∫—ñ –∑ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ —è –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏:
    
    üè´ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
    üìö –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
    üìå –í–∞–∂–ª–∏–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    üìã –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —Ç–∞ —ó—Ö –∑–¥–∞—á–∞
    üìÅ –ü–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≥—Ä—É–ø—ñ
    üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
    üóìÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π
    üìä –û—Ü—ñ–Ω–∫–∏ —Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤
    üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Å—É–º–∫–∏ —É—Ä–æ–∫—ñ–≤
    
    ...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏. –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —É –≤—Å—å–æ–º—É, –ø–æ–≤'—è–∑–∞–Ω–æ–º—É –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º. –ü–æ—á–Ω—ñ–º–æ —Ä–∞–∑–æ–º! üéì`, {replyMarkup});
})

bot.on('/delS', async msg => {
    // const markup = updateKeyboard('apples');

    // return bot.sendMessage(
    //     msg.from.id, 'This is a editMessageReplyMarkup example. So, apples or oranges?', {markup}
    // ).then(re => {
    //     // Start updating message
    //     lastMessage = [msg.from.id, re.result.message_id];
    // });
    let replyMarkup = bot.keyboard([
        ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
        ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
        ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
        ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
        ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
    ], {resize: true});

    return bot.sendMessage(msg.from.id, `ü§ñ –ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º. –û—Å—å –¥–µ—è–∫—ñ –∑ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ —è –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏:
    
    üè´ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
    üìö –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
    üìå –í–∞–∂–ª–∏–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    üìã –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —Ç–∞ —ó—Ö –∑–¥–∞—á–∞
    üìÅ –ü–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≥—Ä—É–ø—ñ
    üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
    üóìÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π
    üìä –û—Ü—ñ–Ω–∫–∏ —Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤
    üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Å—É–º–∫–∏ —É—Ä–æ–∫—ñ–≤
    
    ...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏. –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —É –≤—Å—å–æ–º—É, –ø–æ–≤'—è–∑–∞–Ω–æ–º—É –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º. –ü–æ—á–Ω—ñ–º–æ —Ä–∞–∑–æ–º! üéì`, {replyMarkup});
})


// bot.on("text", async msg =>{
//     console.log(msg)
//     await fetch("https://artem-school-bot.vercel.app/api/keyboard", {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json'
//         },
//         body: JSON.stringify(msg),
//     })
    
//     return null;
// })
// bot.on('text', async msg => {
// if(lastUserMessage[msg.from.username]){
//     console.log(lastUserMessage[msg.from.username])
//     lastUserMessage[msg.from.username] = msg.text;
// }else{
//     lastUserMessage[msg.from.username] = msg.text;

// }
// return null 
// })

bot.on('*', async msg => {
    console.log(msg)
    const text = msg.text
    if (text?.indexOf("/gpt") === 0) return null;
    console.log(lastUserMessage[msg.from.id],userChat[msg.from.id])
    if(msg.from.id === 1052973544  || msg.from.id === 5551509960){
        if(text?.indexOf("!—á–∞—Ç") === 0){
            lastUserMessage[msg.from.id] = "!—á–∞—Ç"
            userChat[msg.from.id] = parseInt(text.split(" ")[1]);
            return null;
        }else if(text === "!—Å—Ç–æ–ø"){
            userChat[msg.from.id] = undefined;
            return null;
        }else if(lastUserMessage[msg.from.id] === "!—á–∞—Ç" && userChat[msg.from.id]){
            console.log(text)
            if(text){
                return bot.sendMessage(userChat[msg.from.id], text);
            }else if(msg?.photo[0].file_id){
                console.log(msg?.photo[0].file_id)
                if(msg.photo?.caption){
                    return bot.sendPhoto(userChat[msg.from.id], msg.photo[0].file_id, {caption:msg.photo.caption})
                }else{
                    return bot.sendPhoto(userChat[msg.from.id], msg.photo[0].file_id)
                }
            }else if(msg?.document.thumbnail.file_id){
                if(msg.document.caption){
                    return bot.sendDocument(userChat[msg.from.id], msg.document.thumbnail.file_id,{caption:msg.document.caption})
                }else{
                    return bot.sendDocument(userChat[msg.from.id], msg.document.thumbnail.file_id)
                }
            }
        }else if(msg.reply_to_message?.forward_from.id && text !== "–í–∏–¥–∞–ª–∏—Ç–∏"){
            if(text){
                return bot.sendMessage(userChat[msg.from.id], text);
            }else if(msg?.photo[0].file_id){
                if(msg.photo?.caption){
                    return bot.sendPhoto(userChat[msg.from.id], msg.photo[0].file_id, {caption:msg.photo.caption})
                }else{
                    return bot.sendPhoto(userChat[msg.from.id], msg.photo[0].file_id)
                }
            }else if(msg?.document.thumbnail.file_id){
                if(msg.document.caption){
                    return bot.sendDocument(userChat[msg.from.id], msg.document.thumbnail.file_id,{caption:msg.document.caption})
                }else{
                    return bot.sendDocument(userChat[msg.from.id], msg.document.thumbnail.file_id)
                }
            }
        }else if(text?.indexOf("!—Ä–æ–∑—Å–∏–ª–∫–∞") === 0){
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('artem-school').collection('users');
            const cursor = coll.find();
            const result = await cursor.toArray();
            await client.close();
            const stringWithoutFirst11Chars = text.slice(10);
            let newArr = [];
            for(let i =0;i<result.length;i++){
                if(newArr.indexOf(result[i].id) === -1){
                    await bot.sendMessage(result[i].id, stringWithoutFirst11Chars);
                    newArr = [result[i].id,...newArr];
                }
            };
            return null;
        }
    }


    if(msg.from.id !== 1052973544 && msg.from.id !== 5551509960 && text === "/chat"){
        userChat[msg.from.id] = 5551509960;
        lastUserMessage[msg.from.id] = "/chat";
        let replyMarkup = bot.keyboard([
            ["–°—Ç–æ–ø"]
        ], {resize: true});
        return bot.sendMessage(msg.from.id, "–í–∏ –≤ —á–∞—Ç—ñ –∑ –∫—É—Ä–∞—Ç–æ—Ä–æ–º, —â–æ–± –≤–∏–π—Ç–∏ –∑ –Ω—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—Å—Ç—å –°—Ç–æ–ø", {replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "/chat" && text === "–°—Ç–æ–ø"){
        userChat[msg.from.id] = undefined;
        lastUserMessage[msg.from.id] = "kfsdklfjksdfl";
        let replyMarkup = bot.keyboard([
            ["–ñ—É—Ä–Ω–∞–ª","–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","–£—á–∞—Å–Ω–∏–∫–∏"],
            ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
            ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏","C—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É","–î/–∑", "–ó–∞–¥–∞—Ç–∏ –¥/–∑"],
            ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–ü–æ–¥—ñ—ó","–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó"],
            ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è","–ö–ª–∞—Å–∏"]
        ], {resize: true});
        if(userStatus[msg.from.id]){
            return bot.sendMessage(msg.from.id, "–ü–æ–≤–µ—Ä–Ω—É–≤ –≤–∞—Å —É –º–µ–Ω—é",{replyMarkup});
        }else if(userStatus[msg.from.id] === 0){
            let replyMarkup = bot.keyboard([
                ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
                ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
                ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
                ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
            ], {resize: true});
            return bot.sendMessage(msg.from.id, "–ü–æ–≤–µ—Ä–Ω—É–≤ –≤–∞—Å —É –º–µ–Ω—é",{replyMarkup});
        }else{
            let replyMarkup = bot.keyboard([
                ['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å'],
                ['–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å', '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å']
            ], {resize: true});
            lastUserMessage[msg.from.id] = "/start";
            return bot.sendMessage(msg.from.id, "–ü–æ–≤–µ—Ä–Ω—É–≤ –≤–∞—Å —É –º–µ–Ω—é",{replyMarkup});
        }
    }else if(lastUserMessage[msg.from.id] === "/chat" && userChat[msg.from.id]){
        return bot.forwardMessage(userChat[msg.from.id], msg.from.id, msg.message_id);
    };
    if(text === "/help"){
        return bot.sendMessage(msg.chat.id,`–ü—Ä–∏–≤—ñ—Ç! üòä

–Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ü—å–æ–≥–æ –±–æ—Ç–∞, –æ—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é: üëâ https://artem-school-doc.vercel.app/docs/intro üëà
        
–ù–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞. –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å —è–∫—ñ-–Ω–µ–±—É–¥—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—å –ø–∏—Ç–∞—Ç–∏! ü§ñüí¨
        
–£–¥–∞—á—ñ —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –±–æ—Ç–∞! üëçüòÑ`)
    }
    let replyMarkup = bot.keyboard([
        ["–ñ—É—Ä–Ω–∞–ª","–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","–£—á–∞—Å–Ω–∏–∫–∏"],
        ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
        ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏","C—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É","–î/–∑", "–ó–∞–¥–∞—Ç–∏ –¥/–∑"],
        ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–ü–æ–¥—ñ—ó","–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó"],
        ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è","–ö–ª–∞—Å–∏"]
    ], {resize: true});


    
    if(text === "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å" && lastUserMessage[msg.from.id] === "/start" && userAction[msg.from.id] === undefined){
        let replyMarkup = bot.keyboard([
            ['–ù–∞–∑–∞–¥'],
        ], {resize: true});
        userAction[msg.from.id] = {actionReg:true}
        lastUserMessage[msg.from.id] = "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å";
        return  bot.sendMessage(msg.from.id, `–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –∫–ª–∞—Å—É`, {replyMarkup});
    }else if((lastUserMessage[msg.from.id] === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å" || lastUserMessage[msg.from.id] === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å" || lastUserMessage[msg.from.id] === "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å") && text === "–ù–∞–∑–∞–¥"){
        lastUserMessage[msg.from.id] = '/start';
        userAction[msg.from.id] = undefined;
        let replyMarkup = bot.keyboard([
            ['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å'],
            ['–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å', '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å']
        ], {resize: true});
    
        return bot.sendMessage(msg.from.id, `ü§ñ –ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º. –û—Å—å –¥–µ—è–∫—ñ –∑ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ —è –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏:
        
        üè´ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
        üìö –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
        üìå –í–∞–∂–ª–∏–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        üìã –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —Ç–∞ —ó—Ö –∑–¥–∞—á–∞
        üìÅ –ü–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≥—Ä—É–ø—ñ
        üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
        üóìÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π
        üìä –û—Ü—ñ–Ω–∫–∏ —Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤
        üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Å—É–º–∫–∏ —É—Ä–æ–∫—ñ–≤
        
        ...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏. –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —É –≤—Å—å–æ–º—É, –ø–æ–≤'—è–∑–∞–Ω–æ–º—É –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º. –ü–æ—á–Ω—ñ–º–æ —Ä–∞–∑–æ–º! üéì`, {replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å" && userAction[msg.from.id].actionReg){
        let idClass = [nanoid(),nanoid()]
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('classrooms');
        const result = await coll.insertOne({name:text,_id:idClass[1],idS:idClass[0],files:[],events:[],marks:[],statisticks:[],materials:[]});
        const coll2 = client.db('artem-school').collection('users');
        const result2 = await coll2.insertOne({nameC: text,name:msg.from.first_name, username:msg.from.username, id:msg.from.id, role:1, classId: idClass[1]});
        await client.close();
        lastUserMessage[msg.from.id] = text;
        userStatus[msg.from.id] = 1;
        userClass[msg.from.id] = idClass[1];
        userAction[msg.from.id] = undefined;
        return bot.sendMessage(msg.from.id, `–ö–ª–∞—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–≤—Å—è!\n\n<code>${idClass[0]}</code> - id –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è —É—á–Ω—è –≤ –∫–ª–∞—Å\n–∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏—î–¥–∞–Ω–Ω—è —É—á–Ω—è https://t.me/artemisSchool_bot?start=${idClass[0]}\n\n<code>${idClass[1]}</code> - id –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è –≤ –∫–ª–∞—Å\n–∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏—î–¥–∞–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è https://t.me/artemisSchool_bot?start=${idClass[1]}
        `, { parseMode: 'html',replyMarkup});
    }else if(text === "–ù–∞–∑–∞–¥"){
        lastUserMessage[msg.from.id] = 'someText';
        userAction[msg.from.id] = undefined;
        userChat[msg.from.id] = undefined;
        if(userStatus[msg.from.id]){
            return  bot.sendMessage(msg.from.id, `–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é`, {replyMarkup});
        }else if(userStatus[msg.from.id] === 0){
            let replyMarkup = bot.keyboard([
                ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
                ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
                ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
                ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
            ], {resize: true});
            return  bot.sendMessage(msg.from.id, `–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é`, {replyMarkup});
        }
    }else if(text === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å" && lastUserMessage[msg.from.id] === "/start"){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});
        lastUserMessage[msg.from.id] = text;
        return  bot.sendMessage(msg.from.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å id —É—á–Ω—è`, {replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å"){
        let replyMarkup = bot.keyboard([
            ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
            ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
            ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
            ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
            ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
        ], {resize: true});
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('classrooms');
                const filter = {idS: msg.text};
                const cursor = coll.find(filter);
                const result = await cursor.toArray();
                console.log(result)
                if(result[0]){
                    const coll2 = client.db('artem-school').collection('users');
                    const result2 = await coll2.insertOne({nameC: result[0].name, name:msg.from.first_name, username:msg.from.username, id:msg.from.id, role:0, classId: `${result[0]._id}`})
                     await client.close();
                     lastUserMessage[msg.from.id] = text;
                     userStatus[msg.from.id] = 0;
                     userClass[msg.from.id] = `${result[0]._id}`;
                     return await bot.sendMessage(msg.from.id, `–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–ª–∞—Å—É`, {replyMarkup});
                }else{
                    await client.close();
                    return await bot.sendMessage(msg.from.id, `–í–∏ –≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π id –∫–ª–∞—Å—É`);
                }  
    }else if(text === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å" && lastUserMessage[msg.from.id] === "/start"){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});
        lastUserMessage[msg.from.id] = text;
        return  bot.sendMessage(msg.from.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å id –≤—á–∏—Ç–µ–ª—è `, {replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å"){
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('classrooms');
                const filter = {_id: msg.text};
                const cursor = coll.find(filter);
                const result = await cursor.toArray();
                if(result[0]){
                    const coll2 = client.db('artem-school').collection('users');
                    const result2 = await coll2.insertOne({nameC: result[0].name,name:msg.from.first_name, username:msg.from.username, id:msg.from.id, role:1, classId: `${result[0]._id}`})
                     await client.close();
                     lastUserMessage[msg.from.id] = text;
                     userStatus[msg.from.id] = 1;
                     userClass[msg.from.id] = `${result[0]._id}`;
                     return await bot.sendMessage(msg.from.id, `–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–ª–∞—Å—É`, {replyMarkup});
                }else{
                    await client.close();
                    return await bot.sendMessage(msg.from.id, `–í–∏ –≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π id –∫–ª–∞—Å—É`);
                } 
    }else if(lastUserMessage[msg.from.id] === "/start" && text !== "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å" && text !== "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å" && text !== "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å"){
        let replyMarkup = bot.keyboard([
            ['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å'],
            ['–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å', '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å']
        ], {resize: true});
        return bot.sendMessage(msg.from.id, `Error`, {replyMarkup});
    }

    if(userStatus[msg.from.id] === undefined && text.indexOf("/start") !== 0){
        console.log(text.indexOf("/start") !== 0, text)
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('users');
        const filter = {id: msg.from.id};
        const cursor = coll.find(filter);
        const result = await cursor.toArray();

        await client.close();
        if(result[0]){
            if(result.length === 1){
                userStatus[msg.from.id] = result[0].role;
                userClass[msg.from.id] = result[0].classId;
            }else{
                let arrBtn = () => {
                    let arr = [];
                    userAction[msg.from.id] =[{act:true}];
                    for(let i = 0; i< result.length;i++){
                        let joinId =nanoid()
                        userAction[msg.from.id] = [{name:result[i].nameC,id:result[i].classId, role:result[i].role, joinId:joinId},...userAction[msg.from.id]]
                        arr = [[bot.inlineButton(`${result[i].nameC}`, {callback: joinId})],...arr]
                    };
                    return arr;
                };
                let replyMarkup = bot.inlineKeyboard(arrBtn());

                return bot.sendMessage(msg.chat.id,`–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–ª–∞—Å–∞—Ö, —Ç–æ–º—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞—Ä–∞–∑ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏:`, {replyMarkup});
            }
        }else{
            return bot.sendMessage(msg.from.id, "–ù–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        }
    }
//.filter((arr) => arr.id === msg.from.id)
if(userStatus[msg.from.id] !== undefined){
    console.log(userChat[msg.from.id])
if(userChat[msg.from.id]){
    if(userChat[userChat[msg.from.id]] !== msg.from.id){
        await bot.sendMessage(userChat[msg.from.id], `${msg.from.first_name} –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è(–Ω–∞–ø–∏—à—ñ—Ç—å —É—á–∞—Å–Ω–∏–∫—É, —â–æ–± —É–≤—ñ–π—Ç–∏ –∑ –Ω–∏–º –≤ –ø–µ—Ä–µ–ø–∏—Å–∫—É)`)
    }
    return await bot.forwardMessage(userChat[msg.from.id], msg.chat.id,msg.message_id)
}

if(text === "–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É"){
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    const coll1 = client.db('artem-school').collection('classrooms');
    const filter1 = {_id: userClass[msg.from.id]};
    const cursor1 = coll1.find(filter1);
    const result1 = await cursor1.toArray();

    const coll = client.db('artem-school').collection('users');
    const filter = {classId: result1[0].idS};
    const filter2 = {classId: result1[0].idT};
    const cursor = coll.find(filter);
    const cursor2 = coll.find(filter2);
    const result = await cursor.toArray();
    const result2 = await cursor2.toArray();
    await client.close();
    
    let conArr = [...result2,...result];
        let arr = [];
        userAction[msg.from.id] = {users:[...conArr]};
        lastUserMessage[msg.from.id] = "–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É";
        for(let i = 0; i< conArr.length;i++){
            if(conArr[i].id !== msg.from.id){
                arr = [[bot.inlineButton(`${conArr[i].name}`, {callback: `${conArr[i]._id}`})],...arr]
            }
        };
    let replyMarkup = bot.inlineKeyboard(arr);

    return bot.sendMessage(msg.chat.id,`–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏:`, {replyMarkup});

}
    if(text === "–ö–ª–∞—Å–∏"){
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('users');
        const filter = {id: msg.from.id};
        const cursor = coll.find(filter);
        const result = await cursor.toArray();

        await client.close();
        if(result[0]){
            if(result.length === 1){
                return bot.sendMessage(msg.chat.id,`–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—ñ`);
            }else{
                let arrBtn = () => {
                    let arr = [];
                    userAction[msg.from.id] =[{act:true}];
                    for(let i = 0; i< result.length;i++){
                        let joinId =nanoid()
                        userAction[msg.from.id] = [{name:result[i].nameC,id:result[i].classId, role:result[i].role, joinId:joinId},...userAction[msg.from.id]]
                        arr = [[bot.inlineButton(`${result[i].nameC}`, {callback: joinId})],...arr]
                    };
                    return arr;
                };
                let replyMarkup = bot.inlineKeyboard(arrBtn());

                return bot.sendMessage(msg.chat.id,`–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–ª–∞—Å–∞—Ö, —Ç–æ–º—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É –≤ —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞—Ä–∞–∑ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏:`, {replyMarkup});
            }
            console.log(userClass[msg.from.id],userStatus[msg.from.id])
        }
    }


    if(text === "–§–∞–π–ª–∏" && userAction[msg.from.id] === undefined){
        // let replyMarkup = bot.inlineKeyboard([
        //     [
        //         bot.inlineButton('–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª', {callback: "–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª"}),
        //     ], [
        //         bot.inlineButton('–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏', {callback: "–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏"})
        //     ]
        // ]);
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        // const coll = client.db('artem-school').collection('users');
        // const filter = {id: msg.from.id};
        // const cursor = coll.find(filter);
        // const result = await cursor.toArray();

        const coll1 = client.db('artem-school').collection('classrooms');
        const filter1 = {_id: userClass[msg.from.id]};
        const cursor1 = coll1.find(filter1);
        const result1 = await cursor1.toArray();
        await client.close();
        if(result1[0]){
            if(result1[0].files.length===0){
                return bot.sendMessage(msg.chat.id, '–í —Ü—å–æ–º—É –∫–ª–∞—Å—ñ —â–µ –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤');
            }else{
                for(let i = 0; i<result1[0].files.length;i++){
                    await bot.forwardMessage(msg.chat.id,result1[0].files[i].chatID,result1[0].files[i].msgID);
                    if(msg.chat.type ==="private" && userStatus[msg.from.id]){
                        await bot.sendMessage(msg.chat.id,`${result1[0].files[i].chatID}&&${result1[0].files[i].msgID}`);
                    }
                }
                return bot.sendMessage(msg.chat.id, '–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ —Ü—å–æ–º—É –∫–ª–∞—Å—ñ');
            }
        }else{
            return bot.sendMessage(msg.chat.id, 'Error');
        }
    }else if(text === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞" && userAction[msg.from.id] === undefined){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});

        lastUserMessage[msg.from.id] = text;
        return bot.sendMessage(msg.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª',{replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞" && msg.text === undefined){
        console.log(lastUserMessage[msg.from.id])
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        // const coll = client.db('artem-school').collection('users');
        // const filter = {id: msg.from.id};
        // const cursor = coll.find(filter);
        // const result = await cursor.toArray();


        const coll1 = client.db('artem-school').collection('classrooms');
        const filter1 = {_id: userClass[msg.from.id]};
        const cursor1 = coll1.find(filter1);
        const result1 = await cursor1.toArray();
                const files = {files : [...result1[0].files, {chatID:msg.chat.id, msgID:msg.message_id}]}
                console.log(result1)
                await coll1.updateOne(
                    {_id: new ObjectId(result1[0]._id)},
                    {
                      $set: { ...files},
                      $currentDate: { lastModified: true }
                    }
                 )
                await client.close();
                lastUserMessage[msg.from.id] = "text–§–∞–π–ª";
                if(userStatus[msg.from.id]){
                    return await bot.sendMessage(msg.chat.id, '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ', {replyMarkup});
                }else if(userStatus[msg.from.id] === 0){
                    let replyMarkup = bot.keyboard([
                        ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
                        ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                        ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
                        ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
                        ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
                    ], {resize: true});
                    return await bot.sendMessage(msg.chat.id, '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ', {replyMarkup});
                }
        return await bot.sendMessage(msg.chat.id, '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ');
    }

    if(text === "–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏" && userAction[msg.from.id] === undefined){
        // let replyMarkup = bot.inlineKeyboard([
        //     [
        //         bot.inlineButton('–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª', {callback: "–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª"}),
        //     ], [
        //         bot.inlineButton('–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏', {callback: "–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏"})
        //     ]
        // ]);
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        // const coll = client.db('artem-school').collection('users');
        // const filter = {id: msg.from.id};
        // const cursor = coll.find(filter);
        // const result = await cursor.toArray();

        const coll1 = client.db('artem-school').collection('classrooms');
        const filter1 = {_id: userClass[msg.from.id]};
        const cursor1 = coll1.find(filter1);
        const result1 = await cursor1.toArray();
        await client.close();
        console.log(userStatus[msg.from.id]  ?  {idT: userClass[msg.from.id]} : {idS: userClass[msg.from.id]})
        if(result1[0]){
            console.log(result1[0].materials || !result1[0].materials[0])
            if(result1[0].materials.length===0){
                return bot.sendMessage(msg.chat.id, '–í —Ü—å–æ–º—É –∫–ª–∞—Å—ñ —â–µ –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤');
            }else{
                for(let i = 0; i<result1[0].materials.length;i++){
                    await bot.forwardMessage(msg.chat.id,result1[0].materials[i].chatID,result1[0].materials[i].msgID);
                    if(msg.chat.type ==="private" && userStatus[msg.from.id]){
                        await bot.sendMessage(msg.chat.id,`${result1[0].materials[i].chatID}&&${result1[0].materials[i].msgID}`);
                    }
                }
                return bot.sendMessage(msg.chat.id, '–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ —Ü—å–æ–º—É –∫–ª–∞—Å—ñ');
            }
        }else{
            return bot.sendMessage(msg.chat.id, 'Error');
        }
    }

    if(text === "–ü–æ–¥—ñ—ó" && userAction[msg.from.id] === undefined){
        // let replyMarkup = bot.inlineKeyboard([
        //     [
        //         bot.inlineButton('–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª', {callback: "–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª"}),
        //     ], [
        //         bot.inlineButton('–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏', {callback: "–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏"})
        //     ]
        // ]);
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        // const coll = client.db('artem-school').collection('users');
        // const filter = {id: msg.from.id};
        // const cursor = coll.find(filter);
        // const result = await cursor.toArray();

        const coll1 = client.db('artem-school').collection('classrooms');
        const filter1 = {_id: userClass[msg.from.id]};
        const cursor1 = coll1.find(filter1);
        const result1 = await cursor1.toArray();
        await client.close();
        if(result1[0]){
            if(result1[0].events.length===0){
                return bot.sendMessage(msg.chat.id, '–í —Ü—å–æ–º—É –∫–ª–∞—Å—ñ —â–µ –Ω–µ–º–∞—î –ø–æ–¥—ñ–π');
            }else{
                console.log(result1[0].events)
                for(let i = 0; i<result1[0].events.length;i++){
                    await bot.sendMessage(msg.chat.id, `${result1[0].events[i].text}\n\n\n–û ${result1[0].events[i].date} ${result1[0].events[i].time}\n\n–î–ª—è: ${result1[0].events[i].who}`);
                    if(msg.chat.type ==="private" && userStatus[msg.from.id]){
                        await bot.sendMessage(msg.from.id, `${result1[0].events[i].id}`);
                    }
                }
                return bot.sendMessage(msg.chat.id, '–¶–µ –≤—Å—ñ –ø–æ–¥—ñ—ó –≤ —Ü—å–æ–º—É –∫–ª–∞—Å—ñ');
            }
        }else{
            return bot.sendMessage(msg.chat.id, 'Error');
        }
    }
    if(text === "–£—á–∞—Å–Ω–∏–∫–∏" && userAction[msg.from.id] === undefined){
        // let replyMarkup = bot.inlineKeyboard([
        //     [
        //         bot.inlineButton('–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª', {callback: "–ó–∞–≥—Ä—É–∑–∏—Ç–∏ —Ñ–∞–π–ª"}),
        //     ], [
        //         bot.inlineButton('–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏', {callback: "–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏"})
        //     ]
        // ]);
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('users');
        const filter = {classId: userClass[msg.from.id]};
        const cursor = coll.find(filter);
        const result = await cursor.toArray();
        await client.close();
        
        let conArr = [...result];
        let msgRep = ``;
        for(let i = 0; i<conArr.length;i++){
            msgRep+= `<code>${conArr[i].id}</code> - —Ü–µ ${conArr[i].name} —Ç–∞ ${conArr[i].role ? "–≤—á–∏—Ç–µ–ª—å" : "—É—á–µ–Ω—å"}\n`;
        }

        return  await bot.sendMessage(msg.chat.id, msgRep,{parseMode: 'html'});

    }

}
if(lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É–ì–ê"){
userAction[msg.from.id] = {...userAction[msg.from.id],file:[{msgId:msg.message_id , chatId:msg.from.id},...userAction[msg.from.id].file]}
}else if(text === "–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏ —É—Ä–æ–∫—É"){
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    // const coll = client.db('artem-school').collection('users');
    // const filter = {id: msg.from.id};
    // const cursor = coll.find(filter);
    // const result = await cursor.toArray();


    const coll1 = client.db('artem-school').collection('lessons');
            const file = {file : userAction[msg.from.id].file}
            console.log(result1)
            await coll1.updateOne(
                {_id: new ObjectId(userAction[msg.from.id]._id)},
                {
                  $set: { ...file},
                  $currentDate: { lastModified: true }
                }
             )
            await client.close();
            lastUserMessage[msg.from.id] = "text–§–∞–π–ª";
            userAction[msg.from.id] = undefined;
            if(userStatus[msg.from.id]){
                return await bot.sendMessage(msg.chat.id, '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ', {replyMarkup});
            }else if(userStatus[msg.from.id] === 0){
                let replyMarkup = bot.keyboard([
                    ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
                    ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                    ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
                    ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
                    ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
                ], {resize: true});
                return await bot.sendMessage(msg.chat.id, '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ', {replyMarkup});
            }
    return await bot.sendMessage(msg.chat.id, '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ');
}
if(text === "–†–æ–∑–∫–ª–∞–¥"){
    lastUserMessage[msg.from.id] = "–†–æ–∑–∫–ª–∞–¥";
    let arrBtn = () => {
        let arr = [];
        for(let i = 0; i< getWeeks().length;i++){
            arr = [[bot.inlineButton(`${getWeeks()[i][4]} - ${getWeeks()[i][0]}`, {callback: `${i}`})],...arr]
        };
        return arr;
    };
    let replyMarkup = bot.inlineKeyboard(arrBtn());
    return bot.sendMessage(msg.from.id, `–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:`, {replyMarkup})
}
if(text === "–§–∞–π–ª–∏ —É—Ä–æ–∫—É"){
    lastUserMessage[msg.from.id] = "–§–∞–π–ª–∏ —É—Ä–æ–∫—É";
    let arrBtn = () => {
        let arr = [];
        for(let i = 0; i< getWeeks().length;i++){
            arr = [[bot.inlineButton(`${getWeeks()[i][4]} - ${getWeeks()[i][0]}`, {callback: `${i}`})],...arr]
        };
        return arr;
    };
    let replyMarkup = bot.inlineKeyboard(arrBtn());
    return bot.sendMessage(msg.from.id, `–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:`, {replyMarkup})
}
if(text === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"){
    lastUserMessage[msg.from.id] = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É";
    let arrBtn = () => {
        let arr = [];
        for(let i = 0; i< getWeeks().length;i++){
            arr = [[bot.inlineButton(`${getWeeks()[i][4]} - ${getWeeks()[i][0]}`, {callback: `${i}`})],...arr]
        };
        return arr;
    };
    let replyMarkup = bot.inlineKeyboard(arrBtn());
    return bot.sendMessage(msg.from.id, `–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:`, {replyMarkup})
}
if(text === "–î/–∑"){
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
        );
    const coll = client.db('artem-school').collection('homework');
    const cursor = coll.find({id:userClass[msg.from.id]});
    const result = await cursor.toArray();
    await client.close();
    let arrNew = [];

    for(let i =0; i<result.length;i++){
        arrNew = [[
            bot.inlineButton(result[i].name, {callback: `${result[i]._id}`}),
        ],...arrNew]
    }
    let replyMarkup = bot.inlineKeyboard(arrNew);
    userAction[msg.from.id] = {task:result};
    lastUserMessage[msg.from.id] = "–î/–∑";
    return bot.sendMessage(msg.chat.id, `–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è:`, {replyMarkup});
}

if(userStatus[msg.from.id]){
    if(lastUserMessage[msg.from.id] === "–†–æ–∑–∫–ª–∞–¥–¢–∏–∂–¥–µ–Ω—å–ó–∞–¥–∞—Ç–∏"){
        userAction[msg.from.id] = {...userAction[msg.from.id], text:text};
        lastUserMessage[msg.from.id] = "–†–æ–∑–∫–ª–∞–¥–¢–∏–∂–¥–µ–Ω—å–ó–∞–¥–∞—Ç–∏–î–∞—Ç—É"
        return bot.sendMessage(msg.from.id, "–í–∫–∞–∂—ñ—Ç—å —á–∞—Å —É—Ä–æ–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–≥:—Ö—Ö-–≥–≥:—Ö—Ö(–ø—Ä–∏–∫–ª–∞–¥ 08:30-9:15):");
    }else if(lastUserMessage[msg.from.id] === "–†–æ–∑–∫–ª–∞–¥–¢–∏–∂–¥–µ–Ω—å–ó–∞–¥–∞—Ç–∏–î–∞—Ç—É"){
    if(isValidFormat(text)){
        let replyMarkup = bot.inlineKeyboard([[bot.inlineButton(`–°—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫ –Ω–∞ –ó—É—Å—Ç—Ä—ñ—á—ñ`, {callback: `–ó—É—Å—Ç—Ä—ñ—á`})],[bot.inlineButton(`–°–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —É—Ä–æ–∫`, {callback: `–°–≤–æ—î`})],[bot.inlineButton(`–ó—É—Å—Ç—Ä—ñ—á—ñ –Ω–µ –±—É–¥–µ`, {callback: `–ù–µ–º–∞—î`})]]);
        userAction[msg.from.id] = {...userAction[msg.from.id], time:text};
        return bot.sendMessage(msg.from.id, "–ß–∏ –±—É–¥–µ —É –≤–∞—Å –∑—É—á—Ç—Ä—ñ—á\n–Ø–∫—â–æ –≤–∏–±—Ä–∞—Ç–∏ –ó—É—Å—Ç—Ä—ñ—á, —Ç–æ –±—É–¥–µ –∑–±–∏—Ä–∞—Ç–∏—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –ó—É—Å—Ç—Ä—ñ—á, –∞–ª–µ –¥–æ–¥–∞—Ç–æ–∫ –≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç—ñ",{replyMarkup})
    }else{
        return bot.sendMessage(msg.from.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É, –Ω–∞–ø–∏—à—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–≥:—Ö—Ö-–≥–≥:—Ö—Ö(–ø—Ä–∏–∫–ª–∞–¥ 08:30-9:15)")
    }
    }else if(lastUserMessage[msg.from.id] ==="–°–≤–æ—î"){
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('lessons');
        const result1 = await coll.insertOne({classId: userClass[msg.from.id], ...userAction[msg.from.id], meet:text});
        await client.close();
          await bot.sendMessage(msg.from.id, "–ü–æ–¥—ñ—è –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ")
    }
    if(text === "–ó–∞–¥–∞—Ç–∏ –¥/–∑"){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});
        lastUserMessage[msg.from.id] = "–ó–∞–¥–∞—Ç–∏ –¥/–∑";
        userAction[msg.from.id] = {id:"",name:"",task:[],date:"", time:"",teacher:msg.from.first_name, status:0};
        return bot.sendMessage(msg.chat.id, `–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è`, {replyMarkup});
    }else if(text === "–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏" && lastUserMessage[msg.from.id] === "–ó–∞–¥–∞—Ç–∏ –¥/–∑" && userAction[msg.from.id].name && userAction[msg.from.id].task.length && !userAction[msg.from.id].date && !userAction[msg.from.id].time && userAction[msg.from.id].status){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});
        userAction[msg.from.id] = {id:"",name:userAction[msg.from.id].name,task:userAction[msg.from.id].task,date:"", time:"",teacher:userAction[msg.from.id].teacher, status:0};
        console.log(userAction[msg.from.id])
        return bot.sendMessage(msg.chat.id, `–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ –∫–æ—Ç—Ä–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥:–º–º:—Ä—Ä—Ä—Ä`,{replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–ó–∞–¥–∞—Ç–∏ –¥/–∑" && userAction[msg.from.id].name && !userAction[msg.from.id].date && !userAction[msg.from.id].time && userAction[msg.from.id].status){
        userAction[msg.from.id] = {id:"",name:userAction[msg.from.id].name,task:[{chatId: msg.from.id,msgId:msg.message_id },...userAction[msg.from.id].task],date:"", time:"",teacher:userAction[msg.from.id].teacher, status:1};
        console.log(userAction[msg.from.id])
        return null;
    }else if(lastUserMessage[msg.from.id] === "–ó–∞–¥–∞—Ç–∏ –¥/–∑" && !userAction[msg.from.id].name && !userAction[msg.from.id].task.length && !userAction[msg.from.id].date && !userAction[msg.from.id].time && !userAction[msg.from.id].status){
        let replyMarkup = bot.keyboard([
            ["–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏"],
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});
        userAction[msg.from.id] = {id:"",name:text,task:[],date:"", time:"",teacher:userAction[msg.from.id].teacher, status:1};
        return bot.sendMessage(msg.chat.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—Å—ñ —Ñ–∞–π–ª–∏ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ —Ç–µ–∫—Å—Ç–∏\n–¢–æ–±—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤—Å–µ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –¥/–∑(—Ñ–æ—Ç–æ –∑–∞–≤–¥–∞–Ω—å, —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω—å, –∞—É–¥—ñ–æ —Ç–∞ –ø–æ–¥—ñ–±–Ω–µ)\n–ü—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ "–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏"`,{replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–ó–∞–¥–∞—Ç–∏ –¥/–∑" && userAction[msg.from.id].name && userAction[msg.from.id].task.length && !userAction[msg.from.id].date && !userAction[msg.from.id].time && !userAction[msg.from.id].status){
        userAction[msg.from.id] = {id:"",name:userAction[msg.from.id].name,task:userAction[msg.from.id].task,date:text, time:"",teacher:userAction[msg.from.id].teacher, status:0};
        return bot.sendMessage(msg.chat.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–∞—Å –∑–¥–∞—á—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–≥:—Ö—Ö`);
    }else if(lastUserMessage[msg.from.id] === "–ó–∞–¥–∞—Ç–∏ –¥/–∑" && userAction[msg.from.id].name && userAction[msg.from.id].task.length && userAction[msg.from.id].date && !userAction[msg.from.id].time && !userAction[msg.from.id].status){
            userAction[msg.from.id] = {type:0,whoMade:[],name:userAction[msg.from.id].name,task:userAction[msg.from.id].task,date:userAction[msg.from.id].date, time:text,teacher:userAction[msg.from.id].teacher};
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
                );                
            const coll1 = client.db('artem-school').collection('homework');
            // const filter1 = {idT: userClass[msg.from.id]} 
            const result1 = await coll1.insertOne({...userAction[msg.from.id],id:userClass[msg.from.id],type:0,tchId:msg.from.id});
            // const result1 = await cursor1.toArray();
            // const homework = {homework : [...result1[0].homework, {task:userAction[msg.from.id],whoMade:[]}]}
            // console.log(result1)
            // await coll1.updateOne(
            //     {_id: new ObjectId(result1[0]._id)},
            //     {
            //       $set: { ...homework},
            //       $currentDate: { lastModified: true }
            //     }
            //  )
            await client.close();
            lastUserMessage[msg.from.id] === "–ó–∞–¥–∞";
            userAction[msg.from.id] = undefined;
            return await bot.sendMessage(msg.chat.id, `–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ`,{replyMarkup});
    }
    console.log(userAction[msg.from.id])
    if(text ==="–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});
        lastUserMessage[msg.from.id] = "–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è";
        return bot.sendMessage(msg.chat.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è/n(–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑—Ä–∞–∑—É –ø—ñ—Å–ª—è –Ω–∞—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É)`, {replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"){
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );

        const coll = client.db('artem-school').collection('users');
        const filter = {classId: userClass[msg.from.id]};
        const cursor = coll.find(filter);
        const result = await cursor.toArray();;
        await client.close();

        for(let i = 0; i<result.length;i++){
            if(result[i].id !== msg.from.id){
                await bot.sendMessage(result[i].id, `–£ –≤–∞—Å –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ ${msg.from.first_name}:\n${text}`);
            }
        }

        if(userStatus[msg.from.id]){
            lastUserMessage[msg.from.id] = "–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ";
            return  await bot.sendMessage(msg.from.id, `–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ`, {replyMarkup});
        }
    }
    if(text === "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó" && userAction[msg.from.id] === undefined){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});
        lastUserMessage[msg.from.id] = text;
        userAction[msg.from.id] = {id:nanoid(),text:"",date:"", time:"",who:""}
        return bot.sendMessage(msg.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥—ñ—ó',{replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó" && lastUserMessage[msg.from.id] === "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó" && !userAction[msg.from.id].text && !userAction[msg.from.id].date && !userAction[msg.from.id].time && !userAction[msg.from.id].who){
        userAction[msg.from.id] = {id:nanoid(),text:text,date:"", time:"",who:""}
        return bot.sendMessage(msg.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–∞—Ç—É –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä');
    }else if(lastUserMessage[msg.from.id] === "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó" && userAction[msg.from.id].text && !userAction[msg.from.id].date && !userAction[msg.from.id].time && !userAction[msg.from.id].who){
        userAction[msg.from.id] = {...userAction[msg.from.id], date:text};
        console.log(userAction[msg.from.id])
        return bot.sendMessage(msg.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–∞—Å –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–≥:—Ö—Ö');
    }else if(lastUserMessage[msg.from.id] === "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó" && userAction[msg.from.id].text && userAction[msg.from.id].date && !userAction[msg.from.id].time && !userAction[msg.from.id].who){
        userAction[msg.from.id] = {...userAction[msg.from.id], time:text};
        return bot.sendMessage(msg.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–ª—è –∫–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ —Ü—è –ø–æ–¥—ñ—è —É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ');
    }else if(lastUserMessage[msg.from.id] === "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó" && userAction[msg.from.id].text && userAction[msg.from.id].date && userAction[msg.from.id].time && !userAction[msg.from.id].who){
        userAction[msg.from.id] = {...userAction[msg.from.id],who:text};
        
        console.log(lastUserMessage[msg.from.id])
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        // const coll = client.db('artem-school').collection('users');
        // const filter = {id: msg.from.id};
        // const cursor = coll.find(filter);
        // const result = await cursor.toArray();


        const coll1 = client.db('artem-school').collection('classrooms');
        const filter1 = {_id: userClass[msg.from.id]};
        const cursor1 = coll1.find(filter1);
        const result1 = await cursor1.toArray();
                const events = {events : [...result1[0].events, userAction[msg.from.id]]}
                console.log(result1)
                await coll1.updateOne(
                    {_id: new ObjectId(result1[0]._id)},
                    {
                      $set: { ...events},
                      $currentDate: { lastModified: true }
                    }
                 )
                await client.close();
                lastUserMessage[msg.from.id] = "text–§–∞–π–ª";
                userAction[msg.from.id] = undefined;
                if(userStatus[msg.from.id]){
                    return await bot.sendMessage(msg.chat.id, '–ü–æ–¥—ñ—è –¥–æ–¥–∞–Ω–∞',{replyMarkup});
                }else if(userStatus[msg.from.id] === 0){
                    let replyMarkup = bot.keyboard([
                        ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
                        ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                        ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
                        ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
                        ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
                    ], {resize: true});
                    return await bot.sendMessage(msg.chat.id, '–ü–æ–¥—ñ—è –¥–æ–¥–∞–Ω–∞',{replyMarkup});
                }
    }

    if(text === "C—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É" && userAction[msg.from.id] === undefined){
        let replyMarkup = bot.keyboard([
            ["–ù–∞–∑–∞–¥"],
        ], {resize: true});

        lastUserMessage[msg.from.id] = text;
        return bot.sendMessage(msg.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–∞—Ç–µ—Ä—ñ–∞–ª —Ç–µ–∫—Å—Ç/–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/–ø–æ—Å–∏–ª–∞–Ω–Ω—è/—Ñ–∞–π–ª',{replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "C—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É"){
        console.log(lastUserMessage[msg.from.id])
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        // const coll = client.db('artem-school').collection('users');
        // const filter = {id: msg.from.id};
        // const cursor = coll.find(filter);
        // const result = await cursor.toArray();


        const coll1 = client.db('artem-school').collection('classrooms');
        const filter1 = {_id: userClass[msg.from.id]}
        console.log(userClass[msg.from.id])
        const cursor1 = coll1.find(filter1);
        const result1 = await cursor1.toArray();
        console.log(result1)
                const materials = {materials : [...result1[0].materials, {chatID:msg.chat.id, msgID:msg.message_id}]}
                await coll1.updateOne(
                    {_id: new ObjectId(result1[0]._id)},
                    {
                      $set: { ...materials},
                      $currentDate: { lastModified: true }
                    }
                 )
                await client.close();
                lastUserMessage[msg.from.id] = "text–§–∞–π–ª";
                return await bot.sendMessage(msg.chat.id, '–ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–æ–¥–∞–Ω–æ', {replyMarkup});
    }

if (text === "–í–∏–¥–∞–ª–∏—Ç–∏" && msg.reply_to_message !== undefined && userAction[msg.from.id] === undefined && msg.reply_to_message.text.includes("&&")){
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    // const coll = client.db('artem-school').collection('users');
    // const filter = {id: msg.from.id};
    // const cursor = coll.find(filter);
    // const result = await cursor.toArray();
    

    const coll1 = client.db('artem-school').collection('classrooms');
    const filter1 = {_id: userClass[msg.from.id]}
    const cursor1 = coll1.find(filter1);
    const result1 = await cursor1.toArray();
    console.log(msg.reply_to_message.text)
            const files = {files : [...result1[0].files.filter((arr) => arr.chatID !== parseInt(msg.reply_to_message.text.split("&&")[0]) && arr.msgID !== parseInt(msg.reply_to_message.text.split("&&")[1]))]}
            console.log(files)
            await coll1.updateOne(
                {_id: new ObjectId(result1[0]._id)},
                {
                  $set: { ...files},
                  $currentDate: { lastModified: true }
                }
             )
            await client.close();
            lastUserMessage[msg.from.id] = "text–§–∞–π–ª";
    return await bot.sendMessage(msg.chat.id, '–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ');
}else if (text === "–í–∏–¥–∞–ª–∏—Ç–∏" && msg.reply_to_message !== undefined && userAction[msg.from.id] === undefined){
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    // const coll = client.db('artem-school').collection('users');
    // const filter = {id: msg.from.id};
    // const cursor = coll.find(filter);
    // const result = await cursor.toArray();
    

    const coll1 = client.db('artem-school').collection('classrooms');
    const filter1 = {_id: userClass[msg.from.id]}
    const cursor1 = coll1.find(filter1);
    const result1 = await cursor1.toArray();
    console.log(msg.reply_to_message.text)
            const events = {events : [...result1[0].events.filter((arr) => arr.id !== msg.reply_to_message.text)]}
            console.log(events)
            await coll1.updateOne(
                {_id: new ObjectId(result1[0]._id)},
                {
                  $set: { ...events},
                  $currentDate: { lastModified: true }
                }
             )
            await client.close();
            lastUserMessage[msg.from.id] = "text–§–∞–π–ª";
    return await bot.sendMessage(msg.chat.id, '–ü–æ–¥—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ');
}else{
        return null;
    }
}else if(userStatus[msg.from.id] === 0){
    if(text === "–ó–¥–∞—Ç–∏ –¥/–∑"){
        // let replyMarkup = bot.keyboard([
        //     ["–ù–∞–∑–∞–¥"],
        // ], {resize: true});
        lastUserMessage[msg.from.id] = "–ó–¥–∞—Ç–∏ –¥/–∑";
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
            );
        const coll = client.db('artem-school').collection('homework');
        const cursor = coll.find({id: userClass[msg.from.id]});
        const result = await cursor.toArray();

        let arrNew = [];

        for(let i =0; i<result.length;i++){
            arrNew = [[
                bot.inlineButton(result[i].name, {callback: result[i]._id}),
            ],...arrNew]
        }
        let replyMarkup = bot.inlineKeyboard(arrNew);
        userAction[msg.from.id] = {task:result,typeHm:true};
        lastUserMessage[msg.from.id] = "–ó–¥–∞—Ç–∏ –¥/–∑";
        return bot.sendMessage(msg.chat.id, `–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è:`, {replyMarkup});
    }
    if(text === "–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏" && lastUserMessage[msg.from.id] === "–ó–¥–∞—Ç–∏ –¥/–∑" && userAction[msg.from.id].status ){
        let replyMarkup = bot.keyboard([
            ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
            ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
            ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
            ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
            ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
        ], {resize: true});
        console.log(userAction[msg.from.id])
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
            );
        const coll1 = client.db('artem-school').collection('homework');
        const filter1 = {_id: new ObjectId(userAction[msg.from.id].id)};
        const cursor1 = coll1.find(filter1);
        const result1 = await cursor1.toArray();
        moment.tz.setDefault('Europe/Kiev');
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å –≤ –£–∫—Ä–∞—ó–Ω—ñ
        const currentDateInUkraine = moment().format('YYYY-MM-DD');
console.log(result1[0])
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –≤ –£–∫—Ä–∞—ó–Ω—ñ –±–µ–∑ —Å–µ–∫—É–Ω–¥
        const currentTimeInUkraine = moment().format('HH:mm');
        const whoMade = {whoMade : [...result1[0].whoMade, {files:userAction[msg.from.id].files, who:msg.from.first_name, id:msg.from.id,date: currentDateInUkraine, time:currentTimeInUkraine}]}
        console.log(result1)
        await coll1.updateOne(
            {_id: result1[0]._id},
            {
              $set: { ...whoMade},
              $currentDate: { lastModified: true }
            }
         )
        await client.close();
        await bot.sendMessage(userAction[msg.from.id].teach, `–í–∞–º –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ ${msg.from.first_name}\n–ó–∞–¥–∞–Ω–µ –¥–∑:`);
        for(let i = 0; i<userAction[msg.from.id].hm.length;i++){
            await bot.forwardMessage(userAction[msg.from.id].teach,userAction[msg.from.id].hm[i].chatId,userAction[msg.from.id].hm[i].msgId);
        };
        await bot.sendMessage(userAction[msg.from.id].teach, `–í—ñ–¥–ø–æ–≤—ñ–¥—å:`);
        for(let i = 0; i<userAction[msg.from.id].files.length;i++){
            await bot.forwardMessage(userAction[msg.from.id].teach,userAction[msg.from.id].files[i].chatId,userAction[msg.from.id].files[i].msgId);
        };
        lastUserMessage[msg.from.id] = "–ó–¥"; 
        userAction[msg.from.id] = undefined;
        return await bot.sendMessage(msg.chat.id, `–í—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞`,{replyMarkup});
    }else if(lastUserMessage[msg.from.id] === "–ó–¥–∞—Ç–∏ –¥/–∑" && userAction[msg.from.id].status){
        userAction[msg.from.id] = {...userAction[msg.from.id],files:[{chatId: msg.from.id,msgId:msg.message_id },...userAction[msg.from.id].files]};
        console.log(userAction[msg.from.id])
        return null;
    }else{
        return null;
    }
}
});

bot.on('/start', async msg => {
    lastUserMessage[msg.from.id] = msg.text;
    console.log(msg.text.split(" ")[1])
    let replyMarkup = bot.keyboard([
        ['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å'],
        ['–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ —É—á–µ–Ω—å', '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –≤ –∫–ª–∞—Å, —è–∫ –≤—á–∏—Ç–µ–ª—å']
    ], {resize: true});
if(msg.text.split(" ")[1]){
    const client = await MongoClient.connect(
        `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
        { useNewUrlParser: true, useUnifiedTopology: true }
    );
    const coll = client.db('artem-school').collection('classrooms');
            const filter = {idS: msg.text.split(" ")[1]};
            const cursor = coll.find(filter);
            const result = await cursor.toArray();
            console.log(result)
            if(result[0]){
                let replyMarkup = bot.keyboard([
                    ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
                    ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                    ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
                    ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
                    ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
                ], {resize: true});
                const coll2 = client.db('artem-school').collection('users');
                const result2 = await coll2.insertOne({nameC: result[0].name, name:msg.from.first_name, username:msg.from.username, id:msg.from.id, role:0, classId: `${result[0]._id}`})
                 await client.close();
                 lastUserMessage[msg.from.id] = msg.text;
                 userStatus[msg.from.id] = 0;
                 userClass[msg.from.id] = `${result[0]._id}`;
                 return await bot.sendMessage(msg.from.id, `–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–ª–∞—Å—É`, {replyMarkup});
            }else{
                let replyMarkup = bot.keyboard([
                    ["–ñ—É—Ä–Ω–∞–ª","–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","–£—á–∞—Å–Ω–∏–∫–∏"],
                    ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                    ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏","C—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É","–î/–∑", "–ó–∞–¥–∞—Ç–∏ –¥/–∑"],
                    ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–ü–æ–¥—ñ—ó","–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó"],
                    ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è","–ö–ª–∞—Å–∏"]
                ], {resize: true});
                const coll = client.db('artem-school').collection('classrooms');
                        const filter = {_id: msg.text.split(" ")[1]};
                        const cursor = coll.find(filter);
                        const result = await cursor.toArray();
                        if(result[0]){
                            const coll2 = client.db('artem-school').collection('users');
                            const result2 = await coll2.insertOne({nameC: result[0].name,name:msg.from.first_name, username:msg.from.username, id:msg.from.id, role:1, classId: `${result[0]._id}`})
                             await client.close();
                             lastUserMessage[msg.from.id] = msg.text;
                             userStatus[msg.from.id] = 1;
                             userClass[msg.from.id] = `${result[0]._id}`;
                             return await bot.sendMessage(msg.from.id, `–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–ª–∞—Å—É`, {replyMarkup});
                }else{
                            await client.close();
                            return await bot.sendMessage(msg.from.id, `–í–∏ –≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π id –∫–ª–∞—Å—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ /start —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ id –¥–ª—è –¥–æ—î–¥–Ω–∞–Ω–∞–Ω–Ω—è –∞–±–æ –ø–æ–ø—Ä–æ—Å—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!`);
                } 
            }  
    

}else{
    return bot.sendMessage(msg.from.id, `ü§ñ –ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º. –û—Å—å –¥–µ—è–∫—ñ –∑ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ —è –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏:
    
    üè´ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏–º–∏ –≥—Ä—É–ø–∞–º–∏
    üìö –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
    üìå –í–∞–∂–ª–∏–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    üìã –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —Ç–∞ —ó—Ö –∑–¥–∞—á–∞
    üìÅ –ü–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≥—Ä—É–ø—ñ
    üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
    üóìÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á–µ–π
    üìä –û—Ü—ñ–Ω–∫–∏ —Ç–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤
    üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Å—É–º–∫–∏ —É—Ä–æ–∫—ñ–≤
    
    ...—Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏. –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —É –≤—Å—å–æ–º—É, –ø–æ–≤'—è–∑–∞–Ω–æ–º—É –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º. –ü–æ—á–Ω—ñ–º–æ —Ä–∞–∑–æ–º! üéì`, {replyMarkup});
}

});





bot.on('callbackQuery', async msg => {
    console.log(msg.data)
    if(lastUserMessage[msg.from.id] === "–†–æ–∑–∫–ª–∞–¥" || lastUserMessage[msg.from.id] ===  "–§–∞–π–ª–∏ —É—Ä–æ–∫—É" || lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"){
            userAction[msg.from.id] = {week:parseInt(msg.data)};
            if(lastUserMessage[msg.from.id] === "–†–æ–∑–∫–ª–∞–¥"){
                lastUserMessage[msg.from.id] = "–†–æ–∑–∫–ª–∞–¥–¢–∏–∂–¥–µ–Ω—å";
            }else if(lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"){
                lastUserMessage[msg.from.id] = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É–ê";
            }else{
                lastUserMessage[msg.from.id] = "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢–∞";
            }
        let arrBtn = () => {
            let arr = [];
            for(let i = 0; i< getWeeks()[parseInt(msg.data)].length;i++){
                arr = [[bot.inlineButton(`${getWeeks()[parseInt(msg.data)][i]}`, {callback: `${i}`})],...arr]
            };
            return arr;
        };
        let replyMarkup = bot.inlineKeyboard(arrBtn());
        bot.sendMessage(msg.from.id, `–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –¥–µ–Ω—å:`, {replyMarkup})
    }else if(lastUserMessage[msg.from.id] === "–†–æ–∑–∫–ª–∞–¥–¢–∏–∂–¥–µ–Ω—å" || lastUserMessage[msg.from.id] ===  "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢–∞" || lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É–ê"){
        if(msg.data === "–°—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫"){
            lastUserMessage[msg.from.id] = "–†–æ–∑–∫–ª–∞–¥–¢–∏–∂–¥–µ–Ω—å–ó–∞–¥–∞—Ç–∏";
            bot.sendMessage(msg.from.id, "–û–ø–∏—Å/–∑–∞–≤–¥–∞–Ω–Ω—è —É—Ä–æ–∫—É:")
        }else if(lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É–ê"){
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('artem-school').collection('lessons');
                    const filter = {classId:userClass[msg.from.id],day:getWeeks()[userAction[msg.from.id].week][parseInt(msg.data)]};
                    const cursor = coll.find(filter);
                    const result = await cursor.toArray();
                    userAction[msg.from.id] = result;
                    await client.close();
                    if(result.length){
                        let newArr = [];
                        for(let i = 0; i< sortTimes(result).length;i++){
                            newArr =[...newArr,result[i].time]
                        };
                        let arrBtn = () => {
                            let arr = [];
                            for(let i = 0; i< sortTimes(result).length;i++){
                                arr = [[bot.inlineButton(`${sortTimes(newArr)[i]}`, {callback: sortTimes(newArr)[i]})],...arr]
                            };
                            return arr;
                        };
                        lastUserMessage[msg.from.id] = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É–ì–ê"
                        let replyMarkup = bot.inlineKeyboard(arrBtn());
                        await bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:", {replyMarkup})
                    }else{
                        bot.sendMessage(msg.from.id, "–°—å–≥–æ–¥–Ω—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î")
                    }
        }else if(lastUserMessage[msg.from.id] ===  "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢–∞"){
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('artem-school').collection('lessons');
                    const filter = {classId:userClass[msg.from.id],day:getWeeks()[userAction[msg.from.id].week][parseInt(msg.data)]};
                    const cursor = coll.find(filter);
                    const result = await cursor.toArray();
                    userAction[msg.from.id] = result;
                    await client.close();
                    if(result.length){
                        let newArr = [];
                        for(let i = 0; i< sortTimes(result).length;i++){
                            newArr =[...newArr,result[i].time]
                        };
                        let arrBtn = () => {
                            let arr = [];
                            for(let i = 0; i< sortTimes(result).length;i++){
                                arr = [[bot.inlineButton(`${sortTimes(newArr)[i]}`, {callback: sortTimes(newArr)[i]})],...arr]
                            };
                            return arr;
                        };
                        lastUserMessage[msg.from.id] = "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢"
                        let replyMarkup = bot.inlineKeyboard(arrBtn());
                        await bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:", {replyMarkup})
                    }else{
                        bot.sendMessage(msg.from.id, "–°—å–≥–æ–¥–Ω—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î")
                    }
        }else if(msg.data === `–£—Ä–æ–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ`){
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('artem-school').collection('lessons');
                    const filter = {classId:userClass[msg.from.id],day:userAction[msg.from.id].day};
                    const cursor = coll.find(filter);
                    const result = await cursor.toArray();
                    await client.close();
                    userAction[msg.from.id] = result;
                    if(result.length){
                        let newArr = [];
                        for(let i = 0; i< sortTimes(result).length;i++){
                            newArr =[...newArr,result[i].time]
                        };
                        let arrBtn = () => {
                            let arr = [];
                            for(let i = 0; i< sortTimes(result).length;i++){
                                arr = [[bot.inlineButton(`${sortTimes(newArr)[i]}`, {callback: sortTimes(newArr)[i]})],...arr]
                            };
                            return arr;
                        };
                        lastUserMessage[msg.from.id] = "dayChoose"
                        let replyMarkup = bot.inlineKeyboard(arrBtn());
                        await bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:", {replyMarkup})
                    }else{
                        bot.sendMessage(msg.from.id, "–°—å–≥–æ–¥–Ω—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î")
                    }
        }else if(userStatus[msg.from.id]){
            userAction[msg.from.id] = {...userAction[msg.from.id], day:getWeeks()[userAction[msg.from.id].week][parseInt(msg.data)], file:[]};
            let replyMarkup = bot.inlineKeyboard([[bot.inlineButton(`–°—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫`, {callback: `–°—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫`})],[bot.inlineButton(`–£—Ä–æ–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ`, {callback: `–£—Ä–æ–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ`})]]);
            bot.sendMessage(msg.from.id, `–í–∏–±–µ—Ä—ñ—Ç—å:`, {replyMarkup})
        }else {
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('artem-school').collection('lessons');
                    const filter = {classId:userClass[msg.from.id],day:getWeeks()[userAction[msg.from.id].week][parseInt(msg.data)]};
                    const cursor = coll.find(filter);
                    const result = await cursor.toArray();
                    userAction[msg.from.id] = result;
                    await client.close();
                    if(result.length){
                        let newArr = [];
                        for(let i = 0; i< sortTimes(result).length;i++){
                            newArr =[...newArr,result[i].time]
                        };
                        let arrBtn = () => {
                            let arr = [];
                            for(let i = 0; i< sortTimes(result).length;i++){
                                arr = [[bot.inlineButton(`${sortTimes(newArr)[i]}`, {callback: sortTimes(newArr)[i]})],...arr]
                            };
                            return arr;
                        };
                        lastUserMessage[msg.from.id] = lastUserMessage[msg.from.id] === "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢—Ä–∞" ? "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢": "dayChoose";
                        let replyMarkup = bot.inlineKeyboard(arrBtn());
                        await bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:", {replyMarkup})
                    }else{
                        bot.sendMessage(msg.from.id, "–ù—ñ—á–æ–≥–æ –Ω–µ–º–∞—î")
                    }
        }
    }else if(lastUserMessage[msg.from.id] === "dayChoose" || lastUserMessage[msg.from.id] ===  "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢" || lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É–ì–ê"){
        let newUs = userAction[msg.from.id].filter((arr) => arr.time === msg.data);
        
        if(lastUserMessage[msg.from.id] === "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É–ì–ê"){
            userAction[msg.from.id] = newUs[0];
            let replyMarkup = bot.keyboard([
                ["–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏ —É—Ä–æ–∫—É"]
            ], {resize: true});
            bot.sendMessage(msg.from.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",{replyMarkup})
        }else if(lastUserMessage[msg.from.id] ===  "–§–∞–π–ª–∏ —É—Ä–æ–∫—É–¢"){
        if(newUs[0].file.length){
            for(let i = 0; i<newUs[0].file.length;i++){
                await bot.forwardMessage(msg.from.id,newUs[0].file[i].chatId,newUs[0].file[i].msgId)
            }
        }else{
            await bot.sendMessage(msg.from.id, "–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤")
        }
        userAction[msg.from.id] = undefined;
        lastUserMessage[msg.from.id] ="fdsfsdfsdf";
    }else if(newUs[0]?.idmeet){
        bot.sendMessage(msg.from.id, `${newUs[0].time} ${newUs[0].day}
        
        ${newUs[0].text}
        
        –ü–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó —É –ó—É—Å—Ç—Ä—ñ—á—ñ:
        –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞—Å —Å–∞–π—Ç zustrich.artemissssss.de —Ç–∞ –¥–æ–ª—É—á–∏—Ç–∏—Å—è, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Id –∑—É—Å—Ç—Ä—ñ—á—ñ <code>/join/${newUs[0].idmeet}</code>.
        –ê–±–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://zustrich.artemissssss.de/join/${newUs[0].idmeet}.`,{parseMode:'html'});
        userAction[msg.from.id] = undefined;
        lastUserMessage[msg.from.id] ="fdsfsdfsdf";
    }else if(newUs[0]?.meet === false){
        bot.sendMessage(msg.from.id, `${newUs[0].time} ${newUs[0].day}
        
        ${newUs[0].text}
        
        –ó—É—á—Ç—Ä—ñ—á—ñ –Ω–µ–º–∞—î.`);
        userAction[msg.from.id] = undefined;
        lastUserMessage[msg.from.id] ="fdsfsdfsdf";
    }else{
        bot.sendMessage(msg.from.id, `${newUs[0].time} ${newUs[0].day}
        
        ${newUs[0].text}
        
        ${newUs[0].meet}`,{parseMode:'html'});
        userAction[msg.from.id] = undefined;
        lastUserMessage[msg.from.id] ="fdsfsdfsdf";
    }

}else if(msg.data ==="–ó—É—Å—Ç—Ä—ñ—á"){
    await fetch("https://artem-school-api.onrender.com/api/zustrich", {
        method: 'POST', // –ú–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É (GET, POST, PUT, DELETE —Ç–æ—â–æ)
        headers: {
            'Content-Type': 'application/json', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Ç—É
            // –Ü–Ω—à—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        },
                body:JSON.stringify({type:1, time:userAction[msg.from.id].time, date:userAction[msg.from.id].date})    
                // –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–∞–Ω—ñ
                // body: JSON.stringify({ key: 'value' }),
            }).then(response => {
                return response.json(); // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
            })
            .then(async data => {
                // –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                console.log(data);
                await bot.sendMessage(msg.from.id, `–ü–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó –Ω–∞ –ø–µ—Ä—ñ–æ–¥ ${userAction[msg.from.id].time} ${userAction[msg.from.id].date} —É –ó—É—Å—Ç—Ä—ñ—á—ñ:
–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞—Å —Å–∞–π—Ç zustrich.artemissssss.de —Ç–∞ –¥–æ–ª—É—á–∏—Ç–∏—Å—è, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Id –∑—É—Å—Ç—Ä—ñ—á—ñ <code>/join/${data.idRoom}</code>.
–ê–±–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://zustrich.artemissssss.de/join/${data.idRoom}.`,{parseMode:"html"});
lastUserMessage[msg.from.id] = data.idRoom;
              });
            const client = await MongoClient.connect(
              `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
              { useNewUrlParser: true, useUnifiedTopology: true }
          );
          const coll = client.db('artem-school').collection('lessons');
          const result1 = await coll.insertOne({classId: userClass[msg.from.id], idmeet:lastUserMessage[msg.from.id], ...userAction[msg.from.id]});
          await client.close();
            await bot.sendMessage(msg.from.id, "–ó—É—Å—Ç—Ä—ñ—á —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ç–∞ –ø–æ–¥—ñ—è –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ")
    }else if(msg.data==="–°–≤–æ—î"){
        lastUserMessage[msg.from.id] = "–°–≤–æ—î";
        bot.sendMessage(msg.from.id, "–ù–∞–¥—ñ—à–ª—ñ—Å—Ç—å —Å–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è:");
    }else if(msg.data==="–ù–µ–º–∞—î"){
        const client = await MongoClient.connect(
            `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_URI}/?retryWrites=true&w=majority`,
            { useNewUrlParser: true, useUnifiedTopology: true }
        );
        const coll = client.db('artem-school').collection('lessons');
        const result1 = await coll.insertOne({classId: userClass[msg.from.id],...userAction[msg.from.id], meet:false});
        await client.close();
          await bot.sendMessage(msg.from.id, "–ü–æ–¥—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    }
    if(lastUserMessage[msg.from.id] === "–î/–∑" && userStatus[msg.from.id] === 0){
        let newArr = userAction[msg.from.id].task.filter(arr => `${arr._id}` === msg.data);
        console.log(userAction[msg.from.id],msg.data, newArr)
        if(!newArr[0].type){
            userAction[msg.from.id] = undefined;
            lastUserMessage[msg.from.id] = "fgfds";
            await bot.sendMessage(msg.from.id, "–ó–∞–≤–¥–∞–Ω–Ω—è:");
            for(let i = 0; i<newArr[0].task.length;i++){
                 await bot.forwardMessage(msg.from.id,newArr[0].task[i].chatId,newArr[0].task[i].msgId);
            }
        }else{
            await bot.sendMessage(msg.from.id, "–¶–µ –¥/–∑ —Ç–µ—Å—Ç");
        }
        await bot.sendMessage(msg.from.id, `–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ ${newArr[0].time} ${newArr[0].date}`)

    }
    if(lastUserMessage[msg.from.id] === "–î/–∑" && userStatus[msg.from.id]){
        let newArr = userAction[msg.from.id].task.filter(arr => `${arr._id}` === msg.data);
        console.log(userAction[msg.from.id],msg.data, newArr)
        userAction[msg.from.id] = {...userAction[msg.from.id],_id:msg.data}
        if(!newArr[0].type){
            let replyMarkup = bot.inlineKeyboard([[
                bot.inlineButton("–ó–∞–≤–¥–∞–Ω–Ω—è", {callback: "–ó–∞–≤–¥–∞–Ω–Ω—è"}),
            ],
            [
                bot.inlineButton("–•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤", {callback: "–•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤"}),
            ]]);
            bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",{replyMarkup})
            lastUserMessage[msg.from.id] = "fgfds";
        }
    }
if(lastUserMessage[msg.from.id] === "–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É"){
    let newArr = userAction[msg.from.id].users.filter(arr => `${arr._id}` === msg.data);
    userChat[msg.from.id] = newArr[0].id;
    let replyMarkup = bot.keyboard([
        ["–ù–∞–∑–∞–¥"]
    ], {resize: true});
    bot.sendMessage(msg.from.id, `–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è ${newArr[0].name}\n–©–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ù–∞–∑–∞–¥`,{replyMarkup})
}
 
    if(msg.data === "–ó–∞–≤–¥–∞–Ω–Ω—è"){
        let newArr = userAction[msg.from.id].task.filter(arr => `${arr._id}` === userAction[msg.from.id]._id);
        console.log(userAction[msg.from.id],msg.data, newArr)
        if(!newArr[0].type){
            userAction[msg.from.id] = undefined;
            lastUserMessage[msg.from.id] = "fgfds";
            await bot.sendMessage(msg.from.id, "–ó–∞–≤–¥–∞–Ω–Ω—è:");
            for(let i = 0; i<newArr[0].task.length;i++){
                 await bot.forwardMessage(msg.from.id,newArr[0].task[i].chatId,newArr[0].task[i].msgId);
            }
        }else{
            await bot.sendMessage(msg.from.id, "–¶–µ –¥/–∑ —Ç–µ—Å—Ç");
        }
        await bot.sendMessage(msg.from.id, `–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ ${newArr[0].time} ${newArr[0].date}`)
    }else if(msg.data === "–•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤"){
        let newArr = userAction[msg.from.id].task.filter(arr => `${arr._id}` === userAction[msg.from.id]._id);
        console.log(userAction[msg.from.id],msg.data, newArr)
        userAction[msg.from.id] = {...userAction[msg.from.id], idSTHM:true};
        let arrNew  = [];
        if(newArr[0].whoMade.length >0){
            for(let i =0; i<newArr[0].whoMade.length;i++){
                arrNew = [[
                    bot.inlineButton(newArr[0].whoMade[i].who, {callback: newArr[0].whoMade[i].id}),
                ],...arrNew]
            }
            let replyMarkup = bot.inlineKeyboard(arrNew);
            bot.sendMessage(msg.from.id, `–í–∏–±–µ—Ä—ñ—Ç—å —É—á–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥/–∑`,{replyMarkup});
        }else{
            userAction[msg.from.id] = undefined;
            bot.sendMessage(msg.from.id, `–ù—ñ—Ö—Ç–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–≤ –¥/–∑`)
        }
    }else if(userAction[msg.from.id]?.idSTHM){
        let newArr = userAction[msg.from.id].task.filter(arr => `${arr._id}` === userAction[msg.from.id]._id)[0].whoMade.filter(arr => `${arr.id}` === msg.data);
        console.log(userAction[msg.from.id],msg.data, newArr)
            userAction[msg.from.id] = undefined;
            lastUserMessage[msg.from.id] = "fgfds";
            for(let i = 0; i<newArr[0].files.length;i++){
                 await bot.forwardMessage(msg.from.id,newArr[0].files[i].chatId,newArr[0].files[i].msgId);
            }
            await bot.sendMessage(msg.from.id,`–†–æ–±–æ—Ç–∞ –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –æ ${newArr[0].time} ${newArr[0].date}`)
    }
    if(userAction[msg.from.id] !== undefined && userAction[msg.from.id][userAction[msg.from.id].length-1]?.act){
        let newArr = userAction[msg.from.id].filter(arr => arr.joinId === msg.data);
        console.log(newArr)
        userStatus[msg.from.id] = newArr[0].role;
        userClass[msg.from.id] = newArr[0].id;
        userAction[msg.from.id]= undefined;
        if(userStatus[msg.from.id]){
            let replyMarkup = bot.keyboard([
                ["–ñ—É—Ä–Ω–∞–ª","–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","–£—á–∞—Å–Ω–∏–∫–∏"],
                ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏","C—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É","–î/–∑", "–ó–∞–¥–∞—Ç–∏ –¥/–∑"],
                ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–ü–æ–¥—ñ—ó","–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó"],
                ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è","–ö–ª–∞—Å–∏"]
            ], {resize: true});
            bot.sendMessage(msg.from.id,`–í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ –∫—ñ–º–Ω–∞—Ç—É ${newArr[0].name}`,{replyMarkup})
        }else{
            let replyMarkup = bot.keyboard([
                ["–©–æ–¥–µ–Ω–∏–∫","–ü–æ–¥—ñ—ó","–£—á–∞—Å–Ω–∏–∫–∏"],
                ["–†–æ–∑–∫–ª–∞–¥","–§–∞–π–ª–∏ —É—Ä–æ–∫—É", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —É—Ä–æ–∫—É"],
                ["–§–∞–π–ª–∏", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞","–î/–∑", "–ó–¥–∞—Ç–∏ –¥/–∑"],
                ["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "–ü–æ–¥—ñ—ó"],
                ["–ù–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—É","–ö–ª–∞—Å–∏"]
            ], {resize: true});
            bot.sendMessage(msg.from.id,`–í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ –∫—ñ–º–Ω–∞—Ç—É ${newArr[0].name}`,{replyMarkup})
        }

    }else if(userAction[msg.from.id]?.typeHm){
        let newArr = userAction[msg.from.id].task.filter(arr => `${arr._id}` === msg.data);
        console.log(userAction[msg.from.id],msg.data, newArr)
        if(!newArr[0].type){
            let replyMarkup = bot.keyboard([
                ["–¶–µ –≤—Å—ñ —Ñ–∞–π–ª–∏"],
                ["–ù–∞–∑–∞–¥"],
            ], {resize: true});
            userAction[msg.from.id] = {id:`${newArr[0]._id}`,teach:newArr[0].tchId,typeHMUP:1,files:[],status:1, hm:newArr[0].task};
            await bot.sendMessage(msg.from.id, "–ó–∞–≤–¥–∞–Ω–Ω—è:");
            for(let i = 0; i<newArr[0].task.length;i++){
                 await bot.forwardMessage(msg.from.id,newArr[0].task[i].chatId,newArr[0].task[i].msgId);
            }
            await bot.sendMessage(msg.from.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª–∏/–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –¥–∑",{replyMarkup});
        }
    }
    return bot.answerCallbackQuery(msg.from.id, `Inline button callback: ${ msg.data }`, true);
});
bot.on(/^\/gpt (.+)$/, async (msg, props) =>{
    console.log(props.match[1]);
    try{
        await fetch("https://artem-school-api.onrender.com/api/gpt", {
            method: 'POST', // –ú–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É (GET, POST, PUT, DELETE —Ç–æ—â–æ)
            headers: {
              'Content-Type': 'application/json', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Ç—É
              // –Ü–Ω—à—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            },
            body:JSON.stringify({text:props.match[1], id:msg.chat.id})    
            // –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–∞–Ω—ñ
            // body: JSON.stringify({ key: 'value' }),
          });
        }catch{
            return bot.sendMessage(msg.from.id, "–ü–æ–º–∏–ª–∫–∞")
        }
    // await fetch('https://artem-school-bot.vercel.app/api/ai', {
    //     method: 'POST', // –ú–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É (GET, POST, PUT, DELETE —Ç–æ—â–æ)
    //     headers: {
    //       'Content-Type': 'application/json', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Ç—É
    //       // –Ü–Ω—à—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    //     },
    //     body:JSON.stringify({ prompt: props.match[1]})
    //     // –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–∞–Ω—ñ
    //     // body: JSON.stringify({ key: 'value' }),
    //   })
        // .then(response => {
        //   return response.json(); // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
        // })
        // .then(data => {
        //   // –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        //   console.log(data);
        //   bot.sendMessage(msg.from.id, data.response);
        // })
    //     .catch(error => {
    //       // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    //       console.error('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    //     });
    return null
      
})
// // Inline query
// bot.on('inlineQuery', msg => {

//     const query = msg.query;
//     const answers = bot.answerList(msg.id);

//     answers.addArticle({
//         id: 'query',
//         title: 'Inline Query',
//         description: `Your query: ${ query }`,
//         message_text: 'Click!'
//     });

//     return bot.answerQuery(answers);

// });

export default bot
